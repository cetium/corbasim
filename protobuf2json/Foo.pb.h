// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Foo.proto

#ifndef PROTOBUF_Foo_2eproto__INCLUDED
#define PROTOBUF_Foo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Foo_2eproto();
void protobuf_AssignDesc_Foo_2eproto();
void protobuf_ShutdownFile_Foo_2eproto();

class Foo;
class Foo_Bar;

// ===================================================================

class Foo_Bar : public ::google::protobuf::Message {
 public:
  Foo_Bar();
  virtual ~Foo_Bar();
  
  Foo_Bar(const Foo_Bar& from);
  
  inline Foo_Bar& operator=(const Foo_Bar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Foo_Bar& default_instance();
  
  void Swap(Foo_Bar* other);
  
  // implements Message ----------------------------------------------
  
  Foo_Bar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Foo_Bar& from);
  void MergeFrom(const Foo_Bar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double dou = 1;
  inline bool has_dou() const;
  inline void clear_dou();
  static const int kDouFieldNumber = 1;
  inline double dou() const;
  inline void set_dou(double value);
  
  // @@protoc_insertion_point(class_scope:Foo.Bar)
 private:
  inline void set_has_dou();
  inline void clear_has_dou();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double dou_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Foo_2eproto();
  friend void protobuf_AssignDesc_Foo_2eproto();
  friend void protobuf_ShutdownFile_Foo_2eproto();
  
  void InitAsDefaultInstance();
  static Foo_Bar* default_instance_;
};
// -------------------------------------------------------------------

class Foo : public ::google::protobuf::Message {
 public:
  Foo();
  virtual ~Foo();
  
  Foo(const Foo& from);
  
  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Foo& default_instance();
  
  void Swap(Foo* other);
  
  // implements Message ----------------------------------------------
  
  Foo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Foo_Bar Bar;
  
  // accessors -------------------------------------------------------
  
  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // repeated string text_repeated = 2;
  inline int text_repeated_size() const;
  inline void clear_text_repeated();
  static const int kTextRepeatedFieldNumber = 2;
  inline const ::std::string& text_repeated(int index) const;
  inline ::std::string* mutable_text_repeated(int index);
  inline void set_text_repeated(int index, const ::std::string& value);
  inline void set_text_repeated(int index, const char* value);
  inline void set_text_repeated(int index, const char* value, size_t size);
  inline ::std::string* add_text_repeated();
  inline void add_text_repeated(const ::std::string& value);
  inline void add_text_repeated(const char* value);
  inline void add_text_repeated(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& text_repeated() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_text_repeated();
  
  // repeated .Foo.Bar bars = 3;
  inline int bars_size() const;
  inline void clear_bars();
  static const int kBarsFieldNumber = 3;
  inline const ::Foo_Bar& bars(int index) const;
  inline ::Foo_Bar* mutable_bars(int index);
  inline ::Foo_Bar* add_bars();
  inline const ::google::protobuf::RepeatedPtrField< ::Foo_Bar >&
      bars() const;
  inline ::google::protobuf::RepeatedPtrField< ::Foo_Bar >*
      mutable_bars();
  
  // @@protoc_insertion_point(class_scope:Foo)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* text_;
  ::google::protobuf::RepeatedPtrField< ::std::string> text_repeated_;
  ::google::protobuf::RepeatedPtrField< ::Foo_Bar > bars_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Foo_2eproto();
  friend void protobuf_AssignDesc_Foo_2eproto();
  friend void protobuf_ShutdownFile_Foo_2eproto();
  
  void InitAsDefaultInstance();
  static Foo* default_instance_;
};
// ===================================================================


// ===================================================================

// Foo_Bar

// required double dou = 1;
inline bool Foo_Bar::has_dou() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Foo_Bar::set_has_dou() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Foo_Bar::clear_has_dou() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Foo_Bar::clear_dou() {
  dou_ = 0;
  clear_has_dou();
}
inline double Foo_Bar::dou() const {
  return dou_;
}
inline void Foo_Bar::set_dou(double value) {
  set_has_dou();
  dou_ = value;
}

// -------------------------------------------------------------------

// Foo

// optional string text = 1;
inline bool Foo::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Foo::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Foo::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Foo::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Foo::text() const {
  return *text_;
}
inline void Foo::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Foo::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Foo::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Foo::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Foo::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string text_repeated = 2;
inline int Foo::text_repeated_size() const {
  return text_repeated_.size();
}
inline void Foo::clear_text_repeated() {
  text_repeated_.Clear();
}
inline const ::std::string& Foo::text_repeated(int index) const {
  return text_repeated_.Get(index);
}
inline ::std::string* Foo::mutable_text_repeated(int index) {
  return text_repeated_.Mutable(index);
}
inline void Foo::set_text_repeated(int index, const ::std::string& value) {
  text_repeated_.Mutable(index)->assign(value);
}
inline void Foo::set_text_repeated(int index, const char* value) {
  text_repeated_.Mutable(index)->assign(value);
}
inline void Foo::set_text_repeated(int index, const char* value, size_t size) {
  text_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Foo::add_text_repeated() {
  return text_repeated_.Add();
}
inline void Foo::add_text_repeated(const ::std::string& value) {
  text_repeated_.Add()->assign(value);
}
inline void Foo::add_text_repeated(const char* value) {
  text_repeated_.Add()->assign(value);
}
inline void Foo::add_text_repeated(const char* value, size_t size) {
  text_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Foo::text_repeated() const {
  return text_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Foo::mutable_text_repeated() {
  return &text_repeated_;
}

// repeated .Foo.Bar bars = 3;
inline int Foo::bars_size() const {
  return bars_.size();
}
inline void Foo::clear_bars() {
  bars_.Clear();
}
inline const ::Foo_Bar& Foo::bars(int index) const {
  return bars_.Get(index);
}
inline ::Foo_Bar* Foo::mutable_bars(int index) {
  return bars_.Mutable(index);
}
inline ::Foo_Bar* Foo::add_bars() {
  return bars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Foo_Bar >&
Foo::bars() const {
  return bars_;
}
inline ::google::protobuf::RepeatedPtrField< ::Foo_Bar >*
Foo::mutable_bars() {
  return &bars_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Foo_2eproto__INCLUDED
