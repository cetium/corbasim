// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_Foo_2eproto__INCLUDED
#define PROTOBUF_Foo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Foo_2eproto();
void protobuf_AssignDesc_Foo_2eproto();
void protobuf_ShutdownFile_Foo_2eproto();

class Foo;

// ===================================================================

class Foo : public ::google::protobuf::Message {
 public:
  Foo();
  virtual ~Foo();
  
  Foo(const Foo& from);
  
  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Foo& default_instance();
  void Swap(Foo* other);
  
  // implements Message ----------------------------------------------
  
  Foo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
  // repeated int32 numbers = 2;
  inline int numbers_size() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& numbers() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_numbers();
  inline ::google::protobuf::int32 numbers(int index) const;
  inline void set_numbers(int index, ::google::protobuf::int32 value);
  inline void add_numbers(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* text_;
  static const ::std::string _default_text_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > numbers_;
  friend void  protobuf_AddDesc_Foo_2eproto();
  friend void protobuf_AssignDesc_Foo_2eproto();
  friend void protobuf_ShutdownFile_Foo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Foo* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Foo

// optional string text = 1;
inline bool Foo::has_text() const {
  return _has_bit(0);
}
inline void Foo::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Foo::text() const {
  return *text_;
}
inline void Foo::set_text(const ::std::string& value) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Foo::set_text(const char* value) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Foo::set_text(const char* value, size_t size) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Foo::mutable_text() {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// repeated int32 numbers = 2;
inline int Foo::numbers_size() const {
  return numbers_.size();
}
inline void Foo::clear_numbers() {
  numbers_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Foo::numbers() const {
  return numbers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Foo::mutable_numbers() {
  return &numbers_;
}
inline ::google::protobuf::int32 Foo::numbers(int index) const {
  return numbers_.Get(index);
}
inline void Foo::set_numbers(int index, ::google::protobuf::int32 value) {
  numbers_.Set(index, value);
}
inline void Foo::add_numbers(::google::protobuf::int32 value) {
  numbers_.Add(value);
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_Foo_2eproto__INCLUDED
