// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:42

// *************************************************************
// Inline operations for union SimpleExample::MyUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:149

ACE_INLINE
void 
SimpleExample::MyUnion::_default ()
{
  this->_reset ();
  this->disc_ = -2147483647;
}

// Accessor to set the discriminant.
ACE_INLINE
void
SimpleExample::MyUnion::_d ( ::CORBA::Long discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Long
SimpleExample::MyUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:579

// Accessor to set the member.
ACE_INLINE
void
SimpleExample::MyUnion::aa (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 100;
  // Set the value.
  this->u_.aa_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
SimpleExample::MyUnion::aa (void) const
{
  return this->u_.aa_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:579

// Accessor to set the member.
ACE_INLINE
void
SimpleExample::MyUnion::bb (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 101;
  // Set the value.
  this->u_.bb_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
SimpleExample::MyUnion::bb (void) const
{
  return this->u_.bb_;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:156

ACE_INLINE
void
TAO::Array_Traits<SimpleExample::Test::a_t_forany>::free (
    SimpleExample::Test::a_t_slice * _tao_slice
  )
{
  SimpleExample::Test::a_t_free (_tao_slice);
}

ACE_INLINE
SimpleExample::Test::a_t_slice *
TAO::Array_Traits<SimpleExample::Test::a_t_forany>::dup (
    const SimpleExample::Test::a_t_slice * _tao_slice
  )
{
  return SimpleExample::Test::a_t_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<SimpleExample::Test::a_t_forany>::copy (
    SimpleExample::Test::a_t_slice * _tao_to,
    const SimpleExample::Test::a_t_slice * _tao_from
  )
{
  SimpleExample::Test::a_t_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<SimpleExample::Test::a_t_forany>::zero (
    SimpleExample::Test::a_t_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 100; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
SimpleExample::Test::a_t_slice *
TAO::Array_Traits<SimpleExample::Test::a_t_forany>::alloc (void)
{
  return SimpleExample::Test::a_t_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:68

ACE_INLINE
SimpleExample::Test::Test (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc),
    the_TAO_Test_Proxy_Broker_ (0)
{
  this->SimpleExample_Test_setup_collocation ();
}

ACE_INLINE
SimpleExample::Test::Test (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
    , the_TAO_Test_Proxy_Broker_ (0)
{
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:156

ACE_INLINE
void
TAO::Array_Traits<SimpleExample::Padres_forany>::free (
    SimpleExample::Padres_slice * _tao_slice
  )
{
  SimpleExample::Padres_free (_tao_slice);
}

ACE_INLINE
SimpleExample::Padres_slice *
TAO::Array_Traits<SimpleExample::Padres_forany>::dup (
    const SimpleExample::Padres_slice * _tao_slice
  )
{
  return SimpleExample::Padres_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<SimpleExample::Padres_forany>::copy (
    SimpleExample::Padres_slice * _tao_to,
    const SimpleExample::Padres_slice * _tao_from
  )
{
  SimpleExample::Padres_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<SimpleExample::Padres_forany>::zero (
    SimpleExample::Padres_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = SimpleExample::Padre ();
    }
}

ACE_INLINE
SimpleExample::Padres_slice *
TAO::Array_Traits<SimpleExample::Padres_forany>::alloc (void)
{
  return SimpleExample::Padres_alloc ();
}


