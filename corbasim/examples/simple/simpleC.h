// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:114

#ifndef _TAO_IDL_SIMPLEC_ZIVPLV_H_
#define _TAO_IDL_SIMPLEC_ZIVPLV_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// be/be_visitor_root/root_ch.cpp:151
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:41

namespace SimpleExample
{
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:250
  
  class MyUnion;
  
  typedef
    ::TAO_Fixed_Var_T<
        MyUnion
      >
    MyUnion_var;
  
  typedef
    MyUnion &
    MyUnion_out;
  
  class  MyUnion
  {
  public:
    MyUnion (void);
    MyUnion (const MyUnion &);
    ~MyUnion (void);
    static void _tao_any_destructor (void*);
    
    MyUnion &operator= (const MyUnion &);
    
    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:107
    
    void _d ( ::CORBA::Long);
    ::CORBA::Long _d (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:101
    
    typedef MyUnion_var _var_type;
    typedef MyUnion_out _out_type;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:451
    
    void aa ( ::CORBA::Long);
    ::CORBA::Long aa (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:451
    
    void bb ( ::CORBA::Long);
    ::CORBA::Long bb (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:137
    
    void _default (void);
  private:
    ::CORBA::Long disc_;
    ::CORBA::Long holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:379
      ::CORBA::Long aa_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:379
      ::CORBA::Long bb_;
    } u_;
    
    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_MyUnion;
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:250
  
  struct St;
  
  typedef
    ::TAO_Var_Var_T<
        St
      >
    St_var;
  
  typedef
    ::TAO_Out_T<
        St
      >
    St_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:47
  
  struct  St
  {
    typedef St_var _var_type;
    typedef St_out _out_type;
    
    static void _tao_any_destructor (void *);
    
    
    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:98

#if !defined (_SIMPLEEXAMPLE_ST__TAO_SEQ_CORBA_LONG__CH_)
#define _SIMPLEEXAMPLE_ST__TAO_SEQ_CORBA_LONG__CH_
    
    class  _tao_seq_CORBA_Long_
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Long
            >
    {
    public:
      _tao_seq_CORBA_Long_ (void);
      _tao_seq_CORBA_Long_ ( ::CORBA::ULong max);
      _tao_seq_CORBA_Long_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Long* buffer, 
        ::CORBA::Boolean release = false);
      _tao_seq_CORBA_Long_ (const _tao_seq_CORBA_Long_ &);
      virtual ~_tao_seq_CORBA_Long_ (void);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // be/be_visitor_field/field_ch.cpp:352
    
    typedef _tao_seq_CORBA_Long_ _l_seq;
    _tao_seq_CORBA_Long_ l;
    
    
    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:98

#if !defined (_SIMPLEEXAMPLE_ST__TAO_SEQ_CORBA_STRING__CH_)
#define _SIMPLEEXAMPLE_ST__TAO_SEQ_CORBA_STRING__CH_
    
    class  _tao_seq_CORBA_STRING_
      : public
          ::TAO::unbounded_basic_string_sequence<char>
    {
    public:
      _tao_seq_CORBA_STRING_ (void);
      _tao_seq_CORBA_STRING_ ( ::CORBA::ULong max);
      _tao_seq_CORBA_STRING_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Char ** buffer, 
        ::CORBA::Boolean release = false);
      _tao_seq_CORBA_STRING_ (const _tao_seq_CORBA_STRING_ &);
      virtual ~_tao_seq_CORBA_STRING_ (void);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // be/be_visitor_field/field_ch.cpp:352
    
    typedef _tao_seq_CORBA_STRING_ _ss_seq;
    _tao_seq_CORBA_STRING_ ss;
    ::CORBA::Long b;
    
    
    SimpleExample::MyUnion uniii;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_St;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:784

#if !defined (_SIMPLEEXAMPLE_TEST__VAR_OUT_CH_)
#define _SIMPLEEXAMPLE_TEST__VAR_OUT_CH_
  
  class Test;
  typedef Test *Test_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Test
      >
    Test_var;
  
  typedef
    TAO_Objref_Out_T<
        Test
      >
    Test_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:45
  
  class  Test
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Test>;
    typedef Test_ptr _ptr_type;
    typedef Test_var _var_type;
    typedef Test_out _out_type;
    
    // The static operations.
    static Test_ptr _duplicate (Test_ptr obj);
    
    static void _tao_release (Test_ptr obj);
    
    static Test_ptr _narrow (::CORBA::Object_ptr obj);
    static Test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Test_ptr _nil (void)
    {
      return static_cast<Test_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:36
    
    virtual void
    operation1 (
      ::CORBA::Long a,
      ::CORBA::Long b,
      const ::SimpleExample::St & c);
    
    // TAO_IDL - Generated from 
    // be/be_visitor_array/array_ch.cpp:61
    
    typedef ::CORBA::Long a_t[100];
    typedef ::CORBA::Long a_t_slice;
    struct a_t_tag {};
    
    
    typedef
      TAO_FixedArray_Var_T<
          a_t,
          a_t_slice,
          a_t_tag
        >
      a_t_var;
    
    typedef
      a_t
      a_t_out;
    
    typedef
      TAO_Array_Forany_T<
          a_t,
          a_t_slice,
          a_t_tag
        >
      a_t_forany;
    
    static a_t_slice *
    a_t_alloc (void);
    
    static void
    a_t_free (
        a_t_slice *_tao_slice);
    
    static a_t_slice *
    a_t_dup (
        const a_t_slice *_tao_slice);
    
    static void
    a_t_copy (
        a_t_slice *_tao_to,
        const a_t_slice *_tao_from);
    
    
    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:40
    
    static ::CORBA::TypeCode_ptr const _tc_a_t;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:36
    
    virtual void
    operation4 (
      ::SimpleExample::Test_ptr a);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:204
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Test_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Test (void);
    
    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void SimpleExample_Test_setup_collocation (void);
    
    // Concrete non-local interface only.
    Test (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Test (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~Test (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Test (const Test &);
    
    void operator= (const Test &);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_Test;
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:250
  
  struct Hijo;
  
  typedef
    ::TAO_Var_Var_T<
        Hijo
      >
    Hijo_var;
  
  typedef
    ::TAO_Out_T<
        Hijo
      >
    Hijo_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:47
  
  struct  Hijo
  {
    typedef Hijo_var _var_type;
    typedef Hijo_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Long b;
    ::CORBA::Boolean l;
    ::TAO::String_Manager s;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_Hijo;
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:250
  
  struct Padre;
  
  typedef
    ::TAO_Var_Var_T<
        Padre
      >
    Padre_var;
  
  typedef
    ::TAO_Out_T<
        Padre
      >
    Padre_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:47
  
  struct  Padre
  {
    typedef Padre_var _var_type;
    typedef Padre_out _out_type;
    
    static void _tao_any_destructor (void *);
    SimpleExample::Hijo h;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_Padre;
  
  // TAO_IDL - Generated from 
  // be/be_visitor_array/array_ch.cpp:61
  
  typedef Padre Padres[10];
  typedef Padre Padres_slice;
  struct Padres_tag {};
  
  
  typedef
    TAO_VarArray_Var_T<
        Padres,
        Padres_slice,
        Padres_tag
      >
    Padres_var;
  
  typedef
    TAO_Array_Out_T<
        Padres,
        Padres_var,
        Padres_slice,
        Padres_tag
      >
    Padres_out;
  
  typedef
    TAO_Array_Forany_T<
        Padres,
        Padres_slice,
        Padres_tag
      >
    Padres_forany;
  
  TAO_NAMESPACE_STORAGE_CLASS Padres_slice *
  Padres_alloc (void);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  Padres_free (
      Padres_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS Padres_slice *
  Padres_dup (
      const Padres_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  Padres_copy (
      Padres_slice *_tao_to,
      const Padres_slice *_tao_from);
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_Padres;
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:250
  
  struct Abuelo;
  
  typedef
    ::TAO_Var_Var_T<
        Abuelo
      >
    Abuelo_var;
  
  typedef
    ::TAO_Out_T<
        Abuelo
      >
    Abuelo_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:47
  
  struct  Abuelo
  {
    typedef Abuelo_var _var_type;
    typedef Abuelo_out _out_type;
    
    static void _tao_any_destructor (void *);
    SimpleExample::Padres p;
    SimpleExample::Test_var tt;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_Abuelo;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:70

} // module SimpleExample

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:193

extern 
TAO::Collocation_Proxy_Broker *
(*SimpleExample__TAO_Test_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SIMPLEEXAMPLE_TEST__TRAITS_)
#define _SIMPLEEXAMPLE_TEST__TRAITS_
  
  template<>
  struct  Objref_Traits< ::SimpleExample::Test>
  {
    static ::SimpleExample::Test_ptr duplicate (
        ::SimpleExample::Test_ptr p);
    static void release (
        ::SimpleExample::Test_ptr p);
    static ::SimpleExample::Test_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SimpleExample::Test_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct  Array_Traits<
      SimpleExample::Test::a_t_forany
    >
  {
    static void free (
        SimpleExample::Test::a_t_slice * _tao_slice);
    static SimpleExample::Test::a_t_slice * dup (
        const SimpleExample::Test::a_t_slice * _tao_slice);
    static void copy (
        SimpleExample::Test::a_t_slice * _tao_to,
        const SimpleExample::Test::a_t_slice * _tao_from);
    static SimpleExample::Test::a_t_slice * alloc (void);
    static void zero (
        SimpleExample::Test::a_t_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      SimpleExample::Padres_forany
    >
  {
    static void free (
        SimpleExample::Padres_slice * _tao_slice);
    static SimpleExample::Padres_slice * dup (
        const SimpleExample::Padres_slice * _tao_slice);
    static void copy (
        SimpleExample::Padres_slice * _tao_to,
        const SimpleExample::Padres_slice * _tao_from);
    static SimpleExample::Padres_slice * alloc (void);
    static void zero (
        SimpleExample::Padres_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::MyUnion &); // copying version
 void operator<<= (::CORBA::Any &, SimpleExample::MyUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::MyUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const SimpleExample::MyUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::St &); // copying version
 void operator<<= (::CORBA::Any &, SimpleExample::St*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::St *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const SimpleExample::St *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SimpleExample
{
   void operator<<= ( ::CORBA::Any &, Test_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Test_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, SimpleExample::Test_ptr); // copying
 void operator<<= (::CORBA::Any &, SimpleExample::Test_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::Test_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::Test::a_t_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::Test::a_t_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::Hijo &); // copying version
 void operator<<= (::CORBA::Any &, SimpleExample::Hijo*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::Hijo *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const SimpleExample::Hijo *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::Padre &); // copying version
 void operator<<= (::CORBA::Any &, SimpleExample::Padre*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::Padre *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const SimpleExample::Padre *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::Padres_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::Padres_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const SimpleExample::Abuelo &); // copying version
 void operator<<= (::CORBA::Any &, SimpleExample::Abuelo*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SimpleExample::Abuelo *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const SimpleExample::Abuelo *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SimpleExample::MyUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::MyUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SimpleExample::St &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::St &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_SimpleExample_St__tao_seq_CORBA_Long__H_
#define _TAO_CDR_OP_SimpleExample_St__tao_seq_CORBA_Long__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (
  TAO_OutputCDR &strm,
  const SimpleExample::St::_tao_seq_CORBA_Long_ &_tao_sequence);

 ::CORBA::Boolean operator>> (
  TAO_InputCDR &strm,
  SimpleExample::St::_tao_seq_CORBA_Long_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_SimpleExample_St__tao_seq_CORBA_Long__H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_SimpleExample_St__tao_seq_CORBA_STRING__H_
#define _TAO_CDR_OP_SimpleExample_St__tao_seq_CORBA_STRING__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (
  TAO_OutputCDR &strm,
  const SimpleExample::St::_tao_seq_CORBA_STRING_ &_tao_sequence);

 ::CORBA::Boolean operator>> (
  TAO_InputCDR &strm,
  SimpleExample::St::_tao_seq_CORBA_STRING_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_SimpleExample_St__tao_seq_CORBA_STRING__H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:46

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SimpleExample::Test_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::Test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:107


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const SimpleExample::Test::a_t_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::Test::a_t_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SimpleExample::Hijo &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::Hijo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SimpleExample::Padre &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::Padre &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:107


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const SimpleExample::Padres_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::Padres_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SimpleExample::Abuelo &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SimpleExample::Abuelo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1591
#if defined (__ACE_INLINE__)
#include "simpleC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

