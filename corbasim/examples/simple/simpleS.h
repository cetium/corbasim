// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:451

#ifndef _TAO_IDL_SIMPLES_L68M5Z_H_
#define _TAO_IDL_SIMPLES_L68M5Z_H_


#include "simpleC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:41

namespace POA_SimpleExample
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:78
  
  class Test;
  typedef Test *Test_ptr;
  
  class  Test
    : public virtual PortableServer::ServantBase
  {
  protected:
    Test (void);
  
  public:
    // Useful for template programming.
    typedef ::SimpleExample::Test _stub_type;
    typedef ::SimpleExample::Test_ptr _stub_ptr_type;
    typedef ::SimpleExample::Test_var _stub_var_type;
    
    Test (const Test& rhs);
    virtual ~Test (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::SimpleExample::Test *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void operation1 (
      ::CORBA::Long a,
      ::CORBA::Long b,
      const ::SimpleExample::St & c) = 0;
    
    static void operation1_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void operation4 (
      ::SimpleExample::Test_ptr a) = 0;
    
    static void operation4_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:72

} // module SimpleExample

// TAO_IDL - Generated from 
// be/be_codegen.cpp:1658


#if defined (__ACE_INLINE__)
#include "simpleS.inl"
#endif /* defined INLINE */

#endif /* ifndef */

