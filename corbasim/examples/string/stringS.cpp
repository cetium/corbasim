// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:703

#ifndef _TAO_IDL_STRINGS_CPP_
#define _TAO_IDL_STRINGS_CPP_


#include "stringS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "stringS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_STRINGTEST_NAMESEQ__SARG_TRAITS_)
#define _STRINGTEST_NAMESEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<StringTest::NameSeq>
    : public
        Var_Size_SArg_Traits_T<
            StringTest::NameSeq,
            TAO::Any_Insert_Policy_Stream <StringTest::NameSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_STRINGTEST_NAMEIDSEQ__SARG_TRAITS_)
#define _STRINGTEST_NAMEIDSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<StringTest::NameIDSeq>
    : public
        Var_Size_SArg_Traits_T<
            StringTest::NameIDSeq,
            TAO::Any_Insert_Policy_Stream <StringTest::NameIDSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_STRINGTEST_STRUCTWITHSTRINGS__SARG_TRAITS_)
#define _STRINGTEST_STRUCTWITHSTRINGS__SARG_TRAITS_
  
  template<>
  class SArg_Traits<StringTest::StructWithStrings>
    : public
        Var_Size_SArg_Traits_T<
            StringTest::StructWithStrings,
            TAO::Any_Insert_Policy_Stream <StringTest::StructWithStrings>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_STRINGTEST_NAMESEQ__ARG_TRAITS_)
#define _STRINGTEST_NAMESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<StringTest::NameSeq>
    : public
        Var_Size_Arg_Traits_T<
            StringTest::NameSeq,
            TAO::Any_Insert_Policy_Stream <StringTest::NameSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_STRINGTEST_NAMEIDSEQ__ARG_TRAITS_)
#define _STRINGTEST_NAMEIDSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<StringTest::NameIDSeq>
    : public
        Var_Size_Arg_Traits_T<
            StringTest::NameIDSeq,
            TAO::Any_Insert_Policy_Stream <StringTest::NameIDSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_STRINGTEST_STRUCTWITHSTRINGS__ARG_TRAITS_)
#define _STRINGTEST_STRUCTWITHSTRINGS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<StringTest::StructWithStrings>
    : public
        Var_Size_Arg_Traits_T<
            StringTest::StructWithStrings,
            TAO::Any_Insert_Policy_Stream <StringTest::StructWithStrings>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry StringTest_InterfaceString_operations [] = {
  {"operation1", &POA_StringTest::InterfaceString::operation1_skel, 0},
  {"operation2", &POA_StringTest::InterfaceString::operation2_skel, 0},
  {"operation3", &POA_StringTest::InterfaceString::operation3_skel, 0},
  {"operation4", &POA_StringTest::InterfaceString::operation4_skel, 0},
  {"operation5", &POA_StringTest::InterfaceString::operation5_skel, 0},
  {"operation6", &POA_StringTest::InterfaceString::operation6_skel, 0},
  {"_is_a", &POA_StringTest::InterfaceString::_is_a_skel, 0},
  {"_non_existent", &POA_StringTest::InterfaceString::_non_existent_skel, 0},
  {"_component", &POA_StringTest::InterfaceString::_component_skel, 0},
  {"_interface", &POA_StringTest::InterfaceString::_interface_skel, 0},
  {"_repository_id", &POA_StringTest::InterfaceString::_repository_id_skel, 0}
};

static const ::CORBA::Long _tao_StringTest_InterfaceString_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (33);
static char _tao_StringTest_InterfaceString_optable_pool [_tao_StringTest_InterfaceString_optable_size];
static ACE_Static_Allocator_Base _tao_StringTest_InterfaceString_allocator (_tao_StringTest_InterfaceString_optable_pool, _tao_StringTest_InterfaceString_optable_size);
static TAO_Dynamic_Hash_OpTable tao_StringTest_InterfaceString_optable (
    StringTest_InterfaceString_operations,
    11,
    22,
    &_tao_StringTest_InterfaceString_allocator
  );


// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:958

TAO::Collocation_Proxy_Broker *
StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
StringTest__TAO_InterfaceString_Proxy_Broker_Factory_Initializer (size_t)
{
  StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer = 
    StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
StringTest__TAO_InterfaceString_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  StringTest__TAO_InterfaceString_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (StringTest__TAO_InterfaceString_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:103

POA_StringTest::InterfaceString::InterfaceString (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_StringTest_InterfaceString_optable;
}

POA_StringTest::InterfaceString::InterfaceString (const InterfaceString& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_StringTest::InterfaceString::~InterfaceString (void)
{
}
namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class operation1_InterfaceString
    : public TAO::Upcall_Command
  {
  public:
    inline operation1_InterfaceString (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->operation1 (
        arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_StringTest::InterfaceString::operation1_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_s;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);

  operation1_InterfaceString command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class operation2_InterfaceString
    : public TAO::Upcall_Command
  {
  public:
    inline operation2_InterfaceString (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::StringTest::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::StringTest::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->operation2 (
        arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_StringTest::InterfaceString::operation2_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringTest::Name>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);

  operation2_InterfaceString command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class operation3_InterfaceString
    : public TAO::Upcall_Command
  {
  public:
    inline operation3_InterfaceString (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::StringTest::NameSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::StringTest::NameSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->operation3 (
        arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_StringTest::InterfaceString::operation3_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringTest::NameSeq>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);

  operation3_InterfaceString command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class operation4_InterfaceString
    : public TAO::Upcall_Command
  {
  public:
    inline operation4_InterfaceString (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::StringTest::StructWithStrings>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::StringTest::StructWithStrings> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->operation4 (
        arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_StringTest::InterfaceString::operation4_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringTest::StructWithStrings>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);

  operation4_InterfaceString command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class operation5_InterfaceString
    : public TAO::Upcall_Command
  {
  public:
    inline operation5_InterfaceString (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::StringTest::NameID>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::StringTest::NameID> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->operation5 (
        arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_StringTest::InterfaceString::operation5_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringTest::NameID>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);

  operation5_InterfaceString command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class operation6_InterfaceString
    : public TAO::Upcall_Command
  {
  public:
    inline operation6_InterfaceString (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::StringTest::NameIDSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::StringTest::NameIDSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->operation6 (
        arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_StringTest::InterfaceString::operation6_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringTest::NameIDSeq>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);

  operation6_InterfaceString command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:169

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _is_a_InterfaceString_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_InterfaceString_Upcall_Command (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_StringTest::InterfaceString::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);
  
  _is_a_InterfaceString_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _non_existent_InterfaceString_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_InterfaceString_Upcall_Command (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_StringTest::InterfaceString::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);
  
  _non_existent_InterfaceString_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}
namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _repository_id_InterfaceString_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_InterfaceString_Upcall_Command (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_StringTest::InterfaceString::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);
  
  _repository_id_InterfaceString_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:508

void POA_StringTest::InterfaceString::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == false)
    {
      throw ::CORBA::MARSHAL ();
    }
}

namespace POA_StringTest
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _get_component_InterfaceString_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_InterfaceString_Upcall_Command (
      POA_StringTest::InterfaceString * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_StringTest::InterfaceString * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_StringTest::InterfaceString::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_StringTest::InterfaceString * const impl =
    static_cast<POA_StringTest::InterfaceString *> (servant);
  
  _get_component_InterfaceString_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_StringTest::InterfaceString::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:StringTest/InterfaceString:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_StringTest::InterfaceString::_interface_repository_id (void) const
{
  return "IDL:StringTest/InterfaceString:1.0";
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:902

void POA_StringTest::InterfaceString::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:852

StringTest::InterfaceString *
POA_StringTest::InterfaceString::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::StringTest::InterfaceString STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

