// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:381


#include "stringC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "stringC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_STRINGTEST_NAMESEQ__ARG_TRAITS_)
#define _STRINGTEST_NAMESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<StringTest::NameSeq>
    : public
        Var_Size_Arg_Traits_T<
            StringTest::NameSeq,
            TAO::Any_Insert_Policy_Stream <StringTest::NameSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_STRINGTEST_NAMEIDSEQ__ARG_TRAITS_)
#define _STRINGTEST_NAMEIDSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<StringTest::NameIDSeq>
    : public
        Var_Size_Arg_Traits_T<
            StringTest::NameIDSeq,
            TAO::Any_Insert_Policy_Stream <StringTest::NameIDSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_STRINGTEST_STRUCTWITHSTRINGS__ARG_TRAITS_)
#define _STRINGTEST_STRUCTWITHSTRINGS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<StringTest::StructWithStrings>
    : public
        Var_Size_Arg_Traits_T<
            StringTest::StructWithStrings,
            TAO::Any_Insert_Policy_Stream <StringTest::StructWithStrings>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_StringTest_Name (
    ::CORBA::tk_alias,
    "IDL:StringTest/Name:1.0",
    "Name",
    &CORBA::_tc_string);
  
namespace StringTest
{
  ::CORBA::TypeCode_ptr const _tc_Name =
    &_tao_tc_StringTest_Name;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_STRINGTEST_NAMESEQ_CS_)
#define _STRINGTEST_NAMESEQ_CS_

StringTest::NameSeq::NameSeq (void)
{}

StringTest::NameSeq::NameSeq (
    ::CORBA::ULong max
  )
  : TAO::unbounded_basic_string_sequence<char>
    (max)
{}

StringTest::NameSeq::NameSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

StringTest::NameSeq::NameSeq (
    const NameSeq &seq
  )
  : TAO::unbounded_basic_string_sequence<char>
    (seq)
{}

StringTest::NameSeq::~NameSeq (void)
{}

void StringTest::NameSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  NameSeq * _tao_tmp_pointer =
    static_cast<NameSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:516


#ifndef _TAO_TYPECODE_StringTest_NameSeq_GUARD
#define _TAO_TYPECODE_StringTest_NameSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        StringTest_NameSeq_0 (
          ::CORBA::tk_sequence,
          &StringTest::_tc_Name,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_StringTest_NameSeq_0 =
        &StringTest_NameSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_StringTest_NameSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_StringTest_NameSeq (
    ::CORBA::tk_alias,
    "IDL:StringTest/NameSeq:1.0",
    "NameSeq",
    &TAO::TypeCode::tc_StringTest_NameSeq_0);
  
namespace StringTest
{
  ::CORBA::TypeCode_ptr const _tc_NameSeq =
    &_tao_tc_StringTest_NameSeq;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_StringTest_NameID (
    ::CORBA::tk_alias,
    "IDL:StringTest/NameID:1.0",
    "NameID",
    &StringTest::_tc_Name);
  
namespace StringTest
{
  ::CORBA::TypeCode_ptr const _tc_NameID =
    &_tao_tc_StringTest_NameID;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_STRINGTEST_NAMEIDSEQ_CS_)
#define _STRINGTEST_NAMEIDSEQ_CS_

StringTest::NameIDSeq::NameIDSeq (void)
{}

StringTest::NameIDSeq::NameIDSeq (
    ::CORBA::ULong max
  )
  : TAO::unbounded_basic_string_sequence<char>
    (max)
{}

StringTest::NameIDSeq::NameIDSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

StringTest::NameIDSeq::NameIDSeq (
    const NameIDSeq &seq
  )
  : TAO::unbounded_basic_string_sequence<char>
    (seq)
{}

StringTest::NameIDSeq::~NameIDSeq (void)
{}

void StringTest::NameIDSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  NameIDSeq * _tao_tmp_pointer =
    static_cast<NameIDSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:516


#ifndef _TAO_TYPECODE_StringTest_NameIDSeq_GUARD
#define _TAO_TYPECODE_StringTest_NameIDSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        StringTest_NameIDSeq_0 (
          ::CORBA::tk_sequence,
          &StringTest::_tc_NameID,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_StringTest_NameIDSeq_0 =
        &StringTest_NameIDSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_StringTest_NameIDSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_StringTest_NameIDSeq (
    ::CORBA::tk_alias,
    "IDL:StringTest/NameIDSeq:1.0",
    "NameIDSeq",
    &TAO::TypeCode::tc_StringTest_NameIDSeq_0);
  
namespace StringTest
{
  ::CORBA::TypeCode_ptr const _tc_NameIDSeq =
    &_tao_tc_StringTest_NameIDSeq;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_StringTest_StructWithStrings[] =
      {
        { "str", &CORBA::_tc_string },
        { "nam", &StringTest::_tc_Name },
        { "id", &StringTest::_tc_NameID }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_StringTest_StructWithStrings (
  ::CORBA::tk_struct,
  "IDL:StringTest/StructWithStrings:1.0",
  "StructWithStrings",
  _tao_fields_StringTest_StructWithStrings,
  3);

namespace StringTest
{
  ::CORBA::TypeCode_ptr const _tc_StructWithStrings =
    &_tao_tc_StringTest_StructWithStrings;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:66

void 
StringTest::StructWithStrings::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  StructWithStrings *_tao_tmp_pointer =
    static_cast<StructWithStrings *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for StringTest::InterfaceString.

StringTest::InterfaceString_ptr
TAO::Objref_Traits<StringTest::InterfaceString>::duplicate (
    StringTest::InterfaceString_ptr p)
{
  return StringTest::InterfaceString::_duplicate (p);
}

void
TAO::Objref_Traits<StringTest::InterfaceString>::release (
    StringTest::InterfaceString_ptr p)
{
  ::CORBA::release (p);
}

StringTest::InterfaceString_ptr
TAO::Objref_Traits<StringTest::InterfaceString>::nil (void)
{
  return StringTest::InterfaceString::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<StringTest::InterfaceString>::marshal (
    const StringTest::InterfaceString_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void StringTest::InterfaceString::operation1 (
    const char * s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceString_Proxy_Broker_ == 0)
    {
      StringTest_InterfaceString_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Char *>::in_arg_val _tao_s (s);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "operation1",
      10,
      this->the_TAO_InterfaceString_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void StringTest::InterfaceString::operation2 (
    const char * n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceString_Proxy_Broker_ == 0)
    {
      StringTest_InterfaceString_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringTest::Name>::in_arg_val _tao_n (n);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "operation2",
      10,
      this->the_TAO_InterfaceString_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void StringTest::InterfaceString::operation3 (
    const ::StringTest::NameSeq & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceString_Proxy_Broker_ == 0)
    {
      StringTest_InterfaceString_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringTest::NameSeq>::in_arg_val _tao_n (n);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "operation3",
      10,
      this->the_TAO_InterfaceString_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void StringTest::InterfaceString::operation4 (
    const ::StringTest::StructWithStrings & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceString_Proxy_Broker_ == 0)
    {
      StringTest_InterfaceString_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringTest::StructWithStrings>::in_arg_val _tao_n (n);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "operation4",
      10,
      this->the_TAO_InterfaceString_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void StringTest::InterfaceString::operation5 (
    const char * n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceString_Proxy_Broker_ == 0)
    {
      StringTest_InterfaceString_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringTest::NameID>::in_arg_val _tao_n (n);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "operation5",
      10,
      this->the_TAO_InterfaceString_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void StringTest::InterfaceString::operation6 (
    const ::StringTest::NameIDSeq & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceString_Proxy_Broker_ == 0)
    {
      StringTest_InterfaceString_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringTest::NameIDSeq>::in_arg_val _tao_n (n);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "operation6",
      10,
      this->the_TAO_InterfaceString_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

StringTest::InterfaceString::InterfaceString (void)
 : the_TAO_InterfaceString_Proxy_Broker_ (0)
{
  this->StringTest_InterfaceString_setup_collocation ();
}

void
StringTest::InterfaceString::StringTest_InterfaceString_setup_collocation ()
{
  if (::StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_InterfaceString_Proxy_Broker_ =
        ::StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer (this);
    }
}

StringTest::InterfaceString::~InterfaceString (void)
{}

void 
StringTest::InterfaceString::_tao_any_destructor (void *_tao_void_pointer)
{
  InterfaceString *_tao_tmp_pointer =
    static_cast<InterfaceString *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

StringTest::InterfaceString_ptr
StringTest::InterfaceString::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<InterfaceString>::narrow (
        _tao_objref,
        "IDL:StringTest/InterfaceString:1.0",
        StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer
      );
}

StringTest::InterfaceString_ptr
StringTest::InterfaceString::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<InterfaceString>::unchecked_narrow (
        _tao_objref,
        "IDL:StringTest/InterfaceString:1.0",
        StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer
      );
}

StringTest::InterfaceString_ptr
StringTest::InterfaceString::_duplicate (InterfaceString_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
StringTest::InterfaceString::_tao_release (InterfaceString_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
StringTest::InterfaceString::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:StringTest/InterfaceString:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* StringTest::InterfaceString::_interface_repository_id (void) const
{
  return "IDL:StringTest/InterfaceString:1.0";
}

::CORBA::Boolean
StringTest::InterfaceString::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_StringTest_InterfaceString (
    ::CORBA::tk_objref,
    "IDL:StringTest/InterfaceString:1.0",
    "InterfaceString");
  
namespace StringTest
{
  ::CORBA::TypeCode_ptr const _tc_InterfaceString =
    &_tao_tc_StringTest_InterfaceString;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const StringTest::NameSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<StringTest::NameSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<StringTest::NameSeq>::insert_copy (
        _tao_any,
        StringTest::NameSeq::_tao_any_destructor,
        StringTest::_tc_NameSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    StringTest::NameSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<StringTest::NameSeq>::insert (
      _tao_any,
      StringTest::NameSeq::_tao_any_destructor,
      StringTest::_tc_NameSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StringTest::NameSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const StringTest::NameSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const StringTest::NameSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<StringTest::NameSeq>::extract (
        _tao_any,
        StringTest::NameSeq::_tao_any_destructor,
        StringTest::_tc_NameSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const StringTest::NameIDSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<StringTest::NameIDSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<StringTest::NameIDSeq>::insert_copy (
        _tao_any,
        StringTest::NameIDSeq::_tao_any_destructor,
        StringTest::_tc_NameIDSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    StringTest::NameIDSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<StringTest::NameIDSeq>::insert (
      _tao_any,
      StringTest::NameIDSeq::_tao_any_destructor,
      StringTest::_tc_NameIDSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StringTest::NameIDSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const StringTest::NameIDSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const StringTest::NameIDSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<StringTest::NameIDSeq>::extract (
        _tao_any,
        StringTest::NameIDSeq::_tao_any_destructor,
        StringTest::_tc_NameIDSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const StringTest::StructWithStrings &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<StringTest::StructWithStrings *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<StringTest::StructWithStrings>::insert_copy (
        _tao_any,
        StringTest::StructWithStrings::_tao_any_destructor,
        StringTest::_tc_StructWithStrings,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    StringTest::StructWithStrings *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<StringTest::StructWithStrings>::insert (
      _tao_any,
      StringTest::StructWithStrings::_tao_any_destructor,
      StringTest::_tc_StructWithStrings,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StringTest::StructWithStrings *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const StringTest::StructWithStrings *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const StringTest::StructWithStrings *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<StringTest::StructWithStrings>::extract (
        _tao_any,
        StringTest::StructWithStrings::_tao_any_destructor,
        StringTest::_tc_StructWithStrings,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StringTest::InterfaceString>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StringTest
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      InterfaceString_ptr _tao_elem)
  {
    InterfaceString_ptr _tao_objptr =
      InterfaceString::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      InterfaceString_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<InterfaceString>::insert (
        _tao_any,
        InterfaceString::_tao_any_destructor,
        _tc_InterfaceString,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      InterfaceString_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<InterfaceString>::extract (
          _tao_any,
          InterfaceString::_tao_any_destructor,
          _tc_InterfaceString,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StringTest::InterfaceString_ptr _tao_elem)
{
  StringTest::InterfaceString_ptr _tao_objptr =
    StringTest::InterfaceString::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StringTest::InterfaceString_ptr *_tao_elem)
{
  TAO::Any_Impl_T<StringTest::InterfaceString>::insert (
      _tao_any,
      StringTest::InterfaceString::_tao_any_destructor,
      StringTest::_tc_InterfaceString,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    StringTest::InterfaceString_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<StringTest::InterfaceString>::extract (
        _tao_any,
        StringTest::InterfaceString::_tao_any_destructor,
        StringTest::_tc_InterfaceString,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_StringTest_NameSeq_CPP_
#define _TAO_CDR_OP_StringTest_NameSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StringTest::NameSeq &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StringTest::NameSeq &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_StringTest_NameSeq_CPP_ */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_StringTest_NameIDSeq_CPP_
#define _TAO_CDR_OP_StringTest_NameIDSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StringTest::NameIDSeq &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StringTest::NameIDSeq &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_StringTest_NameIDSeq_CPP_ */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StringTest::StructWithStrings &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.str.in ()) &&
    (strm << _tao_aggregate.nam.in ()) &&
    (strm << _tao_aggregate.id.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StringTest::StructWithStrings &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.str.out ()) &&
    (strm >> _tao_aggregate.nam.out ()) &&
    (strm >> _tao_aggregate.id.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StringTest::InterfaceString_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StringTest::InterfaceString_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::StringTest::InterfaceString RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        StringTest__TAO_InterfaceString_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



