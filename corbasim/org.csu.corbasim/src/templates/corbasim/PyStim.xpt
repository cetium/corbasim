«IMPORT org::csu::idl::idlmm»

«EXTENSION templates::corbasim::corbasim»

«DEFINE stim FOR TranslationUnit»
	«EXPAND stim FOREACH contains»
«ENDDEFINE»

«DEFINE stim FOR Contained»«ENDDEFINE»

«DEFINE stim FOR ModuleDef»
	«EXPAND stim FOREACH contains»
«ENDDEFINE»

«DEFINE stim FOR InterfaceDef»
«LET getFQN("_") AS fqn»

«FILE fqn+"_pystim.cpp"»
#include <boost/thread.hpp>
#include <boost/bind.hpp>

#include <corbasim/impl.hpp>
#include <corbasim/gui/widgets.hpp>
#include <corbasim/qt/python/AutoResponseMainWindow.hpp>
#include <corbasim/qt/RequestNotifier.hpp>

#include "«getTranslationUnit().getFileNameSkelHpp()»"
#include "«getTranslationUnit().getAdaptedFile()»"
#include "«getTranslationUnit().getAdaptedServantFile()»"

«PROTECT CSTART '/*' CEND '*/' ID fqn+"_pystim::___config"»
typedef «getFQN()» Opposite;
«ENDPROTECT»

int main(int argc, char **argv)
{
	// Initialization
	QTextCodec::setCodecForCStrings (QTextCodec::codecForLocale());
	QApplication app(argc, argv);
	
    CORBA::ORB_var orb = CORBA::ORB_init(argc, argv);
    
	corbasim::gui::gui_factory_base * input_factory = 
        corbasim::gui::gui_factory< «getFQN()» >::get_instance();
	corbasim::gui::gui_factory_base * output_factory = 
        corbasim::gui::gui_factory< Opposite >::get_instance();

	// Registring the servant
	corbasim::qt::RequestNotifier notifier;
    PortableServer::ServantBase_var _impl(
    	corbasim::adapted::create_servant< «getFQN()» >(notifier));
   
	CORBA::Object_var rootPOAObj = 
		orb->resolve_initial_references("RootPOA");
			
	PortableServer::POA_var rootPOA = 
		PortableServer::POA::_narrow(rootPOAObj.in());
			
	PortableServer::POAManager_var manager = rootPOA->the_POAManager();

	PortableServer::ObjectId_var myObjID = 
		rootPOA->activate_object(_impl.in());
				
	CORBA::Object_var obj = rootPOA->servant_to_reference(_impl.in());

    CORBA::String_var ref = orb->object_to_string(obj);
    std::cout << ref << std::endl;

	manager->activate();
	
	// Window
	corbasim::qt::python::AutoResponseMainWindow window;
	window.initialize(input_factory, output_factory);
	
	QObject::connect(
		&notifier, SIGNAL(notifyRequest(corbasim::event::request_ptr)), 
		&window, SLOT(setInputRequest(corbasim::event::request_ptr)));
	
	window.show();
	
	// Running
	boost::thread orbThread(boost::bind(&CORBA::ORB::run, orb.in()));
    
    int res = app.exec();
    
    orb->shutdown();
    orbThread.join();
    orb->destroy();
    
    return res;
}
«ENDFILE»

«ENDLET»
«ENDDEFINE»