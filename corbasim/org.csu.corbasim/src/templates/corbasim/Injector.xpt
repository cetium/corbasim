«IMPORT org::csu::idl::idlmm»

«EXTENSION templates::corbasim::corbasim»
«EXTENSION templates::StructDef»

«DEFINE injector FOR TranslationUnit»
	«EXPAND injector FOREACH contains»
«ENDDEFINE»

«DEFINE injector FOR Contained»«ENDDEFINE»

«DEFINE injector FOR ModuleDef»
	«EXPAND injector FOREACH contains»
«ENDDEFINE»

«REM»Cliente para interfaces«ENDREM»
«DEFINE injector FOR InterfaceDef»
«LET getFQN("_") AS fqn»
«FILE fqn+"_injector.cpp"»
#include <tao/ORB.h>
#include "«getTranslationUnit().getFileNameStubHpp()»"
#include "«getTranslationUnit().getAdaptedFile()»"
#include <corbasim/core/injector.hpp>

int main(int argc, char **argv)
{
	assert(argc > 1);
	
	CORBA::ORB_var orb = CORBA::ORB_init(argc, argv);
	CORBA::Object_var obj;
	obj = orb->string_to_object(argv[1]);
	
	«getFQN()»_var _«identifier» = «getFQN()»::_narrow(obj.in());
	
	corbasim::core::injector< «getFQN()» > _injector;
	_injector.set_reference(_«identifier».in());
	
	for (int i = 2; i < argc; i++)
		_injector.append_file(argv[i]);
		
	_injector.run();
	
	return 0;
}
«ENDFILE»

«ENDLET»
«ENDDEFINE»
