import org::csu::idl::idlmm;

extension templates::auxiliares;
extension templates::cpptypes;

List[Field] getAnonymousFields(StructDef this) :
    members.select(e|e.isAnonymousField())
;

String getMemberCPPType(IDLType this) : get_CPPType(); 
String getMemberCPPType(PrimitiveDef this) : switch (kind) {
		case PrimitiveKind::PK_OBJREF : "::CORBA::Object_var"
		case PrimitiveKind::PK_WSTRING : "::TAO::WString_Manager"
		case PrimitiveKind::PK_STRING : "::TAO::String_Manager"
		default : get_CPPType()
};
String getMemberCPPType(InterfaceDef this) : getFQN() + "_var";


private Boolean specialMemberCPPType(IDLType this) : false; 
private Boolean specialMemberCPPType(PrimitiveDef this) : switch (kind) {
		case PrimitiveKind::PK_OBJREF : true
		case PrimitiveKind::PK_WSTRING : true
		case PrimitiveKind::PK_STRING : true
		default : false
};
private Boolean specialMemberCPPType(InterfaceDef this) : true; 

String getMemberTypeIdNoAnonymous(IDLType this) :
	let t = getOriginalType():
	if t.specialMemberCPPType() then
		t.getMemberCPPType()
	else
    	getMemberCPPType()
;

String getMemberTypeId(Field this) :
    if isAnonymousField() then
    (
        if SequenceDef.isInstance(containedType) then
            "_" + identifier + "_seq"
        else
            "_" + identifier
    )       
    else
    (
		getType().getMemberTypeIdNoAnonymous()	
	)
;

String getMemberTypeIdFQN(Field this, StructDef st) :
    if isAnonymousField() then
    (
        st.getFQN() + "::" + getMemberTypeId()
    )       
    else
    	getMemberTypeId()
;

String getMemberTypeCode(Field this, StructDef struct) :
    if isAnonymousField() then
        struct.getFQN() + "::_tc_" + getMemberTypeId()
    else
        getType().getTypeCode()
;

// isAnonymous() required
String getMemberTypeCodeImpl(Field this, StructDef struct) :
    "__tc_" + struct.getFQN("_") + "_" + getMemberTypeId()
;

private Boolean isAnonymousField(Field this) :
    containedType != null && !PrimitiveDef.isInstance(containedType) && !StructDef.isInstance(containedType) && !StringDef.isInstance(containedType)
;

// Estructuras anidadas
Boolean isNestedStruct(StructDef this):
	definedIn == null && !TranslationUnit.isInstance(eContainer());

List[StructDef] getNestedStructs(StructDef this) :
	(List[StructDef]) members.select(e|StructDef.isInstance(e.containedType)).containedType;


