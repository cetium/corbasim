«IMPORT org::csu::idl::idlmm»

«EXTENSION templates::corbasim::corbasim»

«DEFINE interpreter FOR TranslationUnit»
	«EXPAND interpreter FOREACH contains»
«ENDDEFINE»

«DEFINE interpreter FOR Contained»«ENDDEFINE»

«DEFINE interpreter FOR ModuleDef»
	«EXPAND interpreter FOREACH contains»
«ENDDEFINE»

«DEFINE interpreter FOR InterfaceDef»
«LET getFQN("_") AS fqn»

«FILE fqn+"_interpreter.cpp"»
#include <cassert>
#include <iostream>
#include <boost/bind.hpp>

#include <corbasim/impl.hpp>
#include <corbasim/core/caller.hpp>
#include <corbasim/core/factory.hpp>
#include <corbasim/scripting/interpreter.hpp>

#include "«getTranslationUnit().getFileNameSkelHpp()»"
#include "«getTranslationUnit().getAdaptedFile()»"
#include "«getTranslationUnit().getAdaptedServantFile()»"

«PROTECT CSTART '/*' CEND '*/' ID fqn+"_interpreter::___config"»
#include <corbasim/python/interpreter.hpp>
typedef corbasim::python::interpreter interpreter_type;
«ENDPROTECT»

void do_call(corbasim::core::interface_caller_base* _caller,
			 corbasim::event::request_ptr _req)
{
	delete _caller->do_call(_req.get());
}

void do_output(const std::string& out)
{
	std::cout << out;
}

int main(int argc, char **argv)
{
	assert(argc > 1);
	
    interpreter_type _interpreter;

	// Initialization
    CORBA::ORB_var orb = CORBA::ORB_init(argc, argv);
    
	CORBA::Object_var obj = orb->string_to_object(argv[1]);
	
	«getFQN()»_var _«identifier» = «getFQN()»::_narrow(obj.in());
    
	corbasim::core::factory_base * _factory = 
        corbasim::core::factory< «getFQN()» >::get_instance();
        
    _interpreter.register_factory(_factory);

	corbasim::core::interface_caller< «getFQN()» > _caller(_«identifier»);
	
	_interpreter.request_signal.connect(boost::bind(&do_call, &_caller, _1));
	_interpreter.output_signal.connect(boost::bind(&do_output, _1));
	
	// Running the interpreter
	if (argc > 2)
	{
		corbasim::scripting::context_ptr _ctx(_interpreter.main_conext());
		
		for (int i = 2; i < argc; i++)
			_interpreter.exec_file(_ctx, argv[i]);
	}
	else
		_interpreter.run_interactive();
    
    return 0;
}
«ENDFILE»

«ENDLET»
«ENDDEFINE»